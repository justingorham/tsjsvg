/**
 * This file was autogenerated by @justingorham/tsjsvg
 */

type validatorFunction = (
  data: any,
  schema: any
) =>
  | { valid: boolean; errors?: any }
  | Promise<{ valid: boolean; errors?: any }>;

let defaultValidator: validatorFunction = () => {
  throw new Error('Default validator not set')
}

export const {{defaultsVarName}} = {
  get validator() {
    return defaultValidator
  },
  set validator(val) {
    defaultValidator = val
  },
}

export const {{schemaVarName}} = {{{schema}}};

export type {{definitionKeysTypeName}} = keyof typeof {{schemaVarName}}.definitions;

export class {{modelValidatorClassName}} {
  public static for(def: {{definitionKeysTypeName}}, validatorFunc?: validatorFunction) {
    const validator = new {{modelValidatorClassName}}(def, validatorFunc)
    return {validate: (data: any) => validator.isValidJson(data)}
  }

  constructor(
    private def: {{definitionKeysTypeName}},
    private validator?: validatorFunction,
  ) {}

  public isValidJson(data: any) {
    const validator = this.validator || defaultValidator
    const validationSchema = {
      ...schema,
      $ref: `#/definitions/${this.def}`,
    }
    return Promise.resolve(validator(data, validationSchema))
  }
}
